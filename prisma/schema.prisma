generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // For Credentials (email/password) users:
  passwordHash  String?  @db.Text

  // App-specific fields you can extend later:
  handle        String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]

  donations     Donation[]

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  website     String?
  logoUrl     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relation: one organization can have many donations
  donations   Donation[]
}

model Donation {
  id            String      @id @default(cuid())
  amount        Float
  message       String?
  createdAt     DateTime    @default(now())

  // Foreign keys
  userId        String
  organizationId String

  // Relations
  user          User         @relation(fields: [userId], references: [id])
  organization  Organization @relation(fields: [organizationId], references: [id])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
